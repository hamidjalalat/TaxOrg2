// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Configurations.Anemic.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20240707122626_Migration_14030417_5")]
    partial class Migration_14030417_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Anemic.Entities.ActionMethod", b =>
                {
                    b.Property<int>("ActionMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionMethodId"), 1L, 1);

                    b.Property<int>("ControllerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionMethodId");

                    b.HasIndex("ControllerId");

                    b.ToTable("ActionMethods", "sec");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.Controller", b =>
                {
                    b.Property<int>("ControllerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ControllerId"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("TitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ControllerId");

                    b.ToTable("Controllers", "sec");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.EntityAutoHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Changed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoryActionType")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AutoHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Anemic.Entities.LoginHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ComputerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HistoryType")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LogDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginHistories");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"), 1L, 1);

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("MenuIcon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PageDescription")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("PageIcon")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<HierarchyId>("ParentId")
                        .HasColumnType("hierarchyid");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            EntityName = "",
                            IsDeleted = false,
                            IsVisible = true,
                            MenuIcon = "",
                            PageDescription = "",
                            PageIcon = "",
                            PageTitle = "",
                            ParentId = Microsoft.EntityFrameworkCore.HierarchyId.Parse("/"),
                            Sort = 1000,
                            Title = "",
                            Url = ""
                        },
                        new
                        {
                            MenuId = 2,
                            EntityName = "",
                            IsDeleted = false,
                            IsVisible = true,
                            MenuIcon = "",
                            PageDescription = "",
                            PageIcon = "",
                            PageTitle = "صفحه اصلی",
                            ParentId = Microsoft.EntityFrameworkCore.HierarchyId.Parse("/"),
                            Sort = 1000,
                            Title = "صفحه اصلی",
                            Url = "/Index"
                        },
                        new
                        {
                            MenuId = 100,
                            EntityName = "",
                            IsDeleted = false,
                            IsVisible = true,
                            MenuIcon = "cog-refresh-outline",
                            PageDescription = "",
                            PageIcon = "",
                            PageTitle = "",
                            ParentId = Microsoft.EntityFrameworkCore.HierarchyId.Parse("/"),
                            Sort = 1,
                            Title = "تنظیم شاخص",
                            Url = "regulationPrerequisite-menus"
                        },
                        new
                        {
                            MenuId = 101,
                            EntityName = "",
                            IsDeleted = false,
                            IsVisible = true,
                            MenuIcon = "",
                            PageDescription = "",
                            PageIcon = "",
                            PageTitle = "گروه بندی شاخص",
                            ParentId = Microsoft.EntityFrameworkCore.HierarchyId.Parse("/100/"),
                            Sort = 1,
                            Title = "گروه بندی شاخص",
                            Url = "/RegulationGroups/List"
                        });
                });

            modelBuilder.Entity("Domain.Anemic.Entities.MenuController", b =>
                {
                    b.Property<int>("MenuControllerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuControllerId"), 1L, 1);

                    b.Property<int>("ControllerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("MenuControllerId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuControllers", "sec");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.MenuControllerAction", b =>
                {
                    b.Property<int>("MenuControllerActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuControllerActionId"), 1L, 1);

                    b.Property<int>("ActionMethodId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MenuControllerId")
                        .HasColumnType("int");

                    b.HasKey("MenuControllerActionId");

                    b.HasIndex("ActionMethodId");

                    b.HasIndex("MenuControllerId");

                    b.ToTable("MenuControllerActions", "sec");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.Nazm_tspagent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Create_Time")
                        .HasColumnType("datetime");

                    b.Property<int>("Error_Code")
                        .HasColumnType("int");

                    b.Property<string>("Error_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InqueryDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Reference_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Retry")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Update_Time")
                        .HasColumnType("datetime");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("acn")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<decimal>("am")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("bbc")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("bid")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("bpc")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("bpn")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<decimal>("bros")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("bsrn")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<decimal>("cap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("cfee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("consfee")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("cop")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("crn")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("cut")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("dis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("exr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ft")
                        .HasColumnType("int");

                    b.Property<string>("iinn")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime?>("indati2m")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("indatim")
                        .HasColumnType("datetime");

                    b.Property<long>("inno")
                        .HasColumnType("bigint");

                    b.Property<int>("inp")
                        .HasColumnType("int");

                    b.Property<DateTime?>("input_time")
                        .HasColumnType("datetime");

                    b.Property<int>("ins")
                        .HasColumnType("int");

                    b.Property<int>("inty")
                        .HasColumnType("int");

                    b.Property<string>("irtaxid")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("mu")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("odam")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("odr")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("odt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("olam")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("olr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("olt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pcn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pdt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pmt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("pv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("sbc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("scln")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("setm")
                        .HasColumnType("int");

                    b.Property<decimal>("spro")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("sscv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ssrv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("sstid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sstt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("tax17")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("tinb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tob")
                        .HasColumnType("int");

                    b.Property<string>("trmn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("vra")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("Nazm_tspagents");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.RegulationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RegulationGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Sort = 1,
                            Title = "قوانین بانک مرکزی"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Sort = 2,
                            Title = "کشف قمار"
                        });
                });

            modelBuilder.Entity("Domain.Anemic.Entities.Tspagent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Acn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Am")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Bbc")
                        .HasColumnType("int");

                    b.Property<string>("Bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bpc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bpn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bros")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bsrn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Cfee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Consfee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Create_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Crn")
                        .HasColumnType("int");

                    b.Property<string>("Cut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dis")
                        .HasColumnType("int");

                    b.Property<string>("Error_code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iinn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Indati2m")
                        .HasColumnType("int");

                    b.Property<DateTime>("Indatim")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inp")
                        .HasColumnType("int");

                    b.Property<string>("Input_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inputform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inty")
                        .HasColumnType("int");

                    b.Property<int>("Irtaxid")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Olam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Olr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Olt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pcn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pdt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pmt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Retry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sbc")
                        .HasColumnType("int");

                    b.Property<int>("Scc")
                        .HasColumnType("int");

                    b.Property<int>("Scln")
                        .HasColumnType("int");

                    b.Property<int>("Setm")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Spro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sscv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssrv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sstid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sstt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax17")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Taxid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tinb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tins")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tob")
                        .HasColumnType("int");

                    b.Property<string>("Trmn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Update_time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vra")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tspagents");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("OTPExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrganizationalUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("SecretKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Anemic.Entities.ActionMethod", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.Controller", "Controller")
                        .WithMany("ActionMethods")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.EntityAutoHistory", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.LoginHistory", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.MenuController", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.Controller", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Anemic.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Controller");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Domain.Anemic.Entities.MenuControllerAction", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.ActionMethod", "ActionMethod")
                        .WithMany()
                        .HasForeignKey("ActionMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Anemic.Entities.MenuController", "MenuController")
                        .WithMany()
                        .HasForeignKey("MenuControllerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActionMethod");

                    b.Navigation("MenuController");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Anemic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Anemic.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Anemic.Entities.Controller", b =>
                {
                    b.Navigation("ActionMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
