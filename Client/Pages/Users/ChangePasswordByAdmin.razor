@page "/Users/ChangePasswordByAdmin/{refMenuId:int?}/{Id:guid?}"

@inject NavigationManager NavigationManager
@inject Infrastructure.NotificationSettings NotificationSettingsClass;

@inject Services.UserManagesService UserManagesService;

@if (IsFormLoading)
{
    <NazmLoading IsShow="true" />
}
else
{

	@if (IsFormProgressing)
	{
		<NazmLoadingProgress IsShow="true" />
	}

	@if (refMenuId != null && Id != null && User != null)
	{
		<div class="row">
			<div class="col-md-6 mr-5">
				<EditForm Model="Model" OnValidSubmit="OnSubmitAsync">
					<FluentValidationValidator />
					<DataAnnotationsValidator />

					<div class="mb-3">
						@($"{Resources.DataDictionary.UserName}: ")<span class="font-bold-style">@($"{User.UserName}")</span>
                    </div>

                    <div class="row">
						<div class="col-md-6 mb-3">
							@($"{Resources.DataDictionary.FirstName}: ") 
							<span class="font-bold-style">
								@($"{User.FirstName}")
							</span>
						</div>
						<div class="col-md-6 mb-3">
							@($"{Resources.DataDictionary.LastName}: ")
							<span class="font-bold-style">
								@($"{User.LastName}")
							</span>
						</div>

					</div>


					<div class="mb-3">
						<label for="newPassword" class="form-label">@(Resources.DataDictionary.NewPassword) :</label>
						<input type="password" id="newPassword" class="form-control ltr-style" @bind-value="Model.NewPassword" />
						<div class="form-control-validation">
							<ValidationMessage For="() => Model.NewPassword" />
						</div>
					</div>

					<div class="mb-3">
						<label for="confirmPassword" class="form-label">@(Resources.DataDictionary.ConfirmNewPassword) :</label>
						<input type="password" id="confirmPassword" class="form-control ltr-style" @bind-value="Model.NewConfirmPassword" />
						<div class="form-control-validation">
							<ValidationMessage For="() => Model.NewConfirmPassword" />
						</div>
					</div>

					<div class="mb-3 float-start">
						<button type="button" class="btn btn-danger btn-sm" title="@(Resources.Buttons.Return)" @onclick="ReturnToList">
							<i class="@(Resources.ButtonsIcon.Return) @(Resources.DefaultValues.IconSize24)"></i>
						</button>

						<button type="submit" class="btn btn-primary btn-sm" title="@(Resources.Buttons.Save)">
							<i class="@(Resources.ButtonsIcon.Save) @(Resources.DefaultValues.IconSize24)"></i>
						</button>

						@if (Errors != null)
						{
							<hr />
							<div class="alert alert-danger" role="alert">
								@(Errors)
							</div>
						}
					</div>

				</EditForm>
			</div>
		</div>
	}
}

<NazmNotification NotificationSettings="@(lstNotifications)" />




@code
{
	// ********************
	#region Properties

	[Parameter]
	public int? refMenuId { get; set; }

	[Parameter]
	public Guid? Id { get; set; }

	public bool IsFormLoading { get; set; }
	public bool IsFormProgressing { get; set; }

	private List<Infrastructure.NotificationSettings> lstNotifications { get; set; }

	private ViewModels.Users.UserManageViewModel? User { get; set; }
	
	private ViewModels.Users.UserManageChangePasswordByAdminViewModel Model { get; set; }
	private ViewModels.Users.UserManageChangePasswordByAdminViewModel NewModel { get; set; }

	private List<string> Errors { get; set; }

	#endregion

	// ********************
	#region Events

	protected override async Task OnInitializedAsync()
	{
		IsFormLoading = true;
		// ********************
		await base.OnInitializedAsync();
		Model =
			new ViewModels.Users.UserManageChangePasswordByAdminViewModel();

		lstNotifications = new List<Infrastructure.NotificationSettings>();
		// ********************
		IsFormLoading = false;

		if(Id != null)
		{
			User = await UserManagesService.FindByIdAsync(Id.Value);
		}

	}

	protected override async Task OnParametersSetAsync()
	{
		IsFormLoading = true;
		// ********************

		// ********************
		IsFormLoading = false;

	}

	private async Task OnSubmitAsync()
	{
		IsFormProgressing = true;       
		// ********************
		bool flagResult = await SaveAsync();
		// if (flagResult)
		// {
		// 	string uri = $"{Infrastructure.Utility.setUri<Client.Pages.Users.List>()}/{refMenuId.Value}";
		// 	NavigationManager.NavigateTo(uri: uri, forceLoad: false);
		// }

		// ********************
		IsFormProgressing = false;
	}

	private async Task<bool> SaveAsync()
	{
		NewModel = new ViewModels.Users.UserManageChangePasswordByAdminViewModel()
		{
			UserId = Id.ToString(),
			NewPassword = Model.NewPassword,
			NewConfirmPassword = Model.NewConfirmPassword,

		};
		var varResult = await UserManagesService.ChangePasswordByAdminAsync(NewModel);

		bool flagReturn = false;
		if (varResult != null)
		{
			lstNotifications.Clear();
			flagReturn = varResult.IsSuccess;
			if (varResult.IsSuccess)
			{
				if (varResult.Successes.Count() > 0)
					lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
						(varResult.Successes, Infrastructure.Enums.MessageType.Success));
			}
			if (varResult.IsFailed)
			{
				if (varResult.Errors.Count() > 0)
					lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
						(varResult.Errors, Infrastructure.Enums.MessageType.Error));
			}
		}

		return flagReturn;
	}

	private void ReturnToList()
	{
		string uri = $"{Infrastructure.Utility.setUri<Client.Pages.Users.List>()}/{refMenuId.Value}";
		NavigationManager.NavigateTo(uri: uri, forceLoad: false);
	}
	#endregion
}
