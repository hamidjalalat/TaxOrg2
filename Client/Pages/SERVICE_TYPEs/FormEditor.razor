@inject NavigationManager NavigationManager;

@inject Services.SERVICE_TYPEsService SERVICE_TYPEsService;

<div class="row">
    <div class="col-md-6 mr-5">
        <EditForm Model="Model" OnValidSubmit="HandleValidSubmitAsync">
            <FluentValidationValidator />
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="sstid" class="form-label">@(Resources.DataDictionary.SSTID) :</label>
                <InputNumber id="sstid" class="form-control" @bind-Value="Model.SSTID" />
                <div class="form-control-validation">
                    <ValidationMessage For="() => Model.SSTID" />
                </div>
            </div>

            <div class="mb-3">
                <label for="sstt" class="form-label">@(Resources.DataDictionary.SSTT) :</label>
                <NazmInputText UniqueId="sstt"
                             CSS="form-control"
                               ValueProperty="@(Model.SSTT)"
                             ValueChangedEventHandler="OnTextBoxValueChanged" />
                <div class="form-control-validation">
                    <ValidationMessage For="() => Model.SSTT" />
                </div>
            </div>

            <div class="mb-3">
                <label for="vra" class="form-label">@(Resources.DataDictionary.VRA) :</label>
                <InputNumber id="vra" class="form-control" @bind-Value="Model.VRA" />
                <div class="form-control-validation">
                    <ValidationMessage For="() => Model.VRA" />
                </div>
            </div>

            <div class="mb-3">
                <label for="fieldcode" class="form-label">@(Resources.DataDictionary.FIELDCODE) :</label>
                <InputNumber id="fieldcode" class="form-control" @bind-Value="Model.FIELDCODE" />
                <div class="form-control-validation">
                    <ValidationMessage For="() => Model.FIELDCODE" />
                </div>
            </div>

            <div class="mb-3 float-start">
                <button type="button" class="btn btn-danger btn-sm" title="@(Resources.Buttons.Return)" @onclick="ReturnToList">
                    <i class="@(Resources.ButtonsIcon.Return) @(Resources.DefaultValues.IconSize24)"></i>
                </button>

                <button type="submit" class="btn btn-primary btn-sm" title="@(Resources.Buttons.Save)">
                    <i class="@(Resources.ButtonsIcon.Save) @(Resources.DefaultValues.IconSize24)"></i>
                </button>

                @if (Errors != null)
                {
                    <hr />
                    <div class="alert alert-danger" role="alert">
                        @(Errors)
                    </div>
                }
            </div>

        </EditForm>
    </div>
</div>


@code
{
    // ********************
    #region Properties

    [Parameter]
    public int? refMenuId { get; set; }

    [Parameter]
    public ViewModels.SERVICE_TYPEs.SERVICE_TYPEViewModel Model { get; set; }

    [Parameter]
    public Infrastructure.Enums.EditFormType Type { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<string> Errors { get; set; }

    #endregion

    // ********************
    #region Events

    private void HandleValidSubmitAsync()
    {
        var result = OnValidSubmit.InvokeAsync(null);
    }

    private void ReturnToList()
    {
        string uri = $"{Infrastructure.Utility.setUri<Client.Pages.SERVICE_TYPEs.List>()}/{refMenuId.Value}";
        NavigationManager.NavigateTo(uri: uri, forceLoad: false);
    }


    private async Task OnTextBoxValueChanged(string value)
    {
        Model.SSTT = value;
    }

    #endregion
}



@*

<div class="mb-3">
    <label for="nazmActiveInActive" class="form-label">@(Resources.DataDictionary.IsActive) :</label>
    <NazmActiveInactive Model="@(Model.IsActive)"
        InputRadioGroupId="nazmActiveInActive"
        OnEventChange="OnIsActiveChange" />
    <div class="form-control-validation">
        <ValidationMessage For="() => Model.IsActive" />
    </div>
</div>

private void OnIsActiveChange(bool value)
{
    Model.IsActive = value;
}

*@


