@page "/Nazm_tspagent/Create/{refMenuId:int?}/{refIsReturned:int?}/{refBranchId:int?}/{refInvoiceModelId:int?}/{refNetsaleId:int?}/{refDimProductId:int?}/{refInno:long?}/{refBid?}/{refBpc?}/{refPolicyNo?}/{refStatus:int?}/{refYear:int?}/{refSeason:int?}/{refMonth:int?}"
@*  *@

@inject NavigationManager NavigationManager;
@inject Infrastructure.NotificationSettings NotificationSettingsClass;

@inject Services.Nazm_tspagentsService Nazm_tspagentsService;


@if (IsFormLoading)
{
    <NazmLoading IsShow="true" />
}
else
{

    @if (IsFormProgressing)
    {
        <NazmLoadingProgress IsShow="true"/>
    }

    @if (refMenuId != null)
    {
        <FormEditor Model="Model"
            OnValidSubmit="OnSubmitAsync"
            Type="Infrastructure.Enums.EditFormType.Create"
            refMenuId="refMenuId"
            refIsReturned="refIsReturned"
            refBranchId="refBranchId"
            refInvoiceModelId="refInvoiceModelId"
            refNetsaleId="refNetsaleId"
            refDimProductId="refDimProductId"
            refInno="refInno"
            refBid="@(refBid)"
            refBpc="@(refBpc)"
            refPolicyNo="@(refPolicyNo)"
            refStatus="@(refStatus)"
            refYear="refYear"
            refSeason="refSeason"
            refMonth="refMonth">

        </FormEditor>

    }
}

<NazmNotification NotificationSettings="@(lstNotifications)" />




@code
{
    // ********************
    #region Properties

    [Parameter]
    public int? refMenuId { get; set; }

    [Parameter]
    public int? refIsReturned { get; set; }
    [Parameter]
    public int? refBranchId { get; set; }
    [Parameter]
    public int? refInvoiceModelId { get; set; }
    [Parameter]
    public int? refNetsaleId { get; set; }
    [Parameter]
    public int? refDimProductId { get; set; }
    [Parameter]
    public long? refInno { get; set; }
    [Parameter]
    public string refBid { get; set; }
    [Parameter]
    public string refBpc { get; set; }
    [Parameter]
    public string refPolicyNo { get; set; }
    [Parameter]
    public int? refStatus { get; set; }
    [Parameter]
    public int? refYear { get; set; }
    [Parameter]
    public int? refSeason { get; set; }
    [Parameter]
    public int? refMonth { get; set; }

    public bool IsFormLoading { get; set; }
    public bool IsFormProgressing { get; set; }

    private List<Infrastructure.NotificationSettings> lstNotifications { get; set; }


    public ViewModels.Nazm_tspagents.Nazm_tspagentViewModel Model { get; set; }
    private ViewModels.Nazm_tspagents.Nazm_tspagentCreateViewModel NewModel { get; set; }

    #endregion

    // ********************
    #region Events

    protected override async Task OnInitializedAsync()
    {
        IsFormLoading = true;
        // ********************
        await base.OnInitializedAsync();
        Model =
        new ViewModels.Nazm_tspagents.Nazm_tspagentViewModel()
        {
                IsActive = true,
        };

        lstNotifications = new List<Infrastructure.NotificationSettings>();
        // ********************
        IsFormLoading = false;

    }

    private async Task OnSubmitAsync()
    {
        IsFormProgressing = true;
        // ********************
        bool flagResult = await SaveAsync();
        if (flagResult)
        {
            string uri = $"{Infrastructure.Utility.setUri<Client.Pages.Nazm_tspagent.List>()}/{refMenuId.Value}/{refIsReturned.Value}/{refBranchId.Value}/{refInvoiceModelId.Value}/{refNetsaleId.Value}/{refDimProductId.Value}/{refInno.Value}/{refBid}/{refBpc}/{refPolicyNo}/{refStatus}/{refYear.Value}/{refSeason.Value}/{refMonth.Value}";
            NavigationManager.NavigateTo(uri: uri, forceLoad: false);
        }
        // ********************
        IsFormProgressing = false;

    }

    private async Task<bool> SaveAsync()
    {
        NewModel = new ViewModels.Nazm_tspagents.Nazm_tspagentCreateViewModel()
        {
            inno = Model.inno,
            indatim = Model.indatim,
            tins = Model.tins,
            bid = Model.bid,
            tob = Model.tob,
            setm = Model.setm,
            tinb = Model.tinb,
            bpc = Model.bpc,
            inty = Model.inty,
            ft = Model.ft,
            ins = Model.ins,
            inp = Model.inp,
            sstid = Model.sstid,
            sstt = Model.sstt,
            am = Model.am,
            dis = Model.dis,
            vra = Model.vra,
        };

        var varResult = await Nazm_tspagentsService.PostAsync(NewModel);
        bool flagReturn = false;
        if (varResult != null)
        {

            lstNotifications.Clear();
            flagReturn = varResult.IsSuccess;
            if (varResult.IsSuccess)
            {
                if (varResult.Successes.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Successes, Infrastructure.Enums.MessageType.Success));
            }
            if (varResult.IsFailed)
            {
                if (varResult.Errors.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Errors, Infrastructure.Enums.MessageType.Error));
            }
        }

        return flagReturn;
    }

    #endregion
}