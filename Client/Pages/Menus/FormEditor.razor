@inject NavigationManager NavigationManager;

<div class="row">
	<div class="col-md-6 mr-5">
		<EditForm Model="Model" OnValidSubmit="HandleValidSubmitAsync">
			<FluentValidationValidator />
			<DataAnnotationsValidator />

			<div class="mb-3">
				<label for="nazmVisibleInVisible" class="form-label">@(Resources.DataDictionary.IsVisible) :</label>
				<NazmActiveInactive Model="@(Model.IsVisible)"
					InputRadioGroupId="nazmVisibleInVisible"
					OnEventChange="OnIsVisibleChange" />
				<div class="form-control-validation">
					<ValidationMessage For="() => Model.IsVisible" />
				</div>
			</div>

			<div class="mb-3">
				<label for="sort" class="form-label">@(Resources.DataDictionary.Sort) :</label>
				<InputNumber id="sort" class="form-control" @bind-Value="Model.Sort" />
				<div class="form-control-validation">
					<ValidationMessage For="() => Model.Sort" />
				</div>
			</div>

			<div class="mb-3">
				<label for="pageTitle" class="form-label">@(Resources.DataDictionary.PageTitle) :</label>
				<NazmInputText UniqueId="pageTitle"
							 CSS="form-control"
							 ValueProperty="@(Model.PageTitle)"
							 ValueChangedEventHandler="OnPageTitleValueChanged" />
				<div class="form-control-validation">
					<ValidationMessage For="() => Model.PageTitle" />
				</div>
			</div>

			<div class="mb-3">
				<label for="pageDescription" class="form-label">@(Resources.DataDictionary.PageDescription) :</label>
				<NazmInputText UniqueId="pageDescription"
							 CSS="form-control"
							 ValueProperty="@(Model.PageDescription)"
							 ValueChangedEventHandler="OnPageDescriptionValueChanged" />
				<div class="form-control-validation">
					<ValidationMessage For="() => Model.PageDescription" />
				</div>
			</div>

			<div class="mb-3 float-start">
				<button type="button" class="btn btn-danger btn-sm" title="@(Resources.Buttons.Return)" @onclick="ReturnToList">
					<i class="@(Resources.ButtonsIcon.Return) @(Resources.DefaultValues.IconSize24)"></i>
				</button>

				<button type="submit" class="btn btn-primary btn-sm" title="@(Resources.Buttons.Save)">
					<i class="@(Resources.ButtonsIcon.Save) @(Resources.DefaultValues.IconSize24)"></i>
				</button>
			</div>

		</EditForm>
	</div>
</div>

@code
{
	// ********************
	#region Properties

	[Parameter]
	public int? refMenuId { get; set; }

	[Parameter]
	public ViewModels.Menus.MenuViewModel Model { get; set; }

	[Parameter]
	public Infrastructure.Enums.EditFormType Type { get; set; }

	[Parameter]
	public EventCallback OnValidSubmit { get; set; }

	#endregion

	// ********************
	#region Events

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private void HandleValidSubmitAsync()
	{
		var result = OnValidSubmit.InvokeAsync(null);
	}

	private void ReturnToList()
	{
		string uri = $"{Infrastructure.Utility.setUri<Client.Pages.Menus.List>()}/{refMenuId.Value}";
		NavigationManager.NavigateTo(uri: uri, forceLoad: false);
	}

	private void OnIsVisibleChange(bool value)
	{
		Model.IsVisible = value;
	}

	private async Task OnPageTitleValueChanged(string value)
	{
		Model.PageTitle = value;
	}

	private async Task OnPageDescriptionValueChanged(string value)
	{
		Model.PageDescription = value;
	}

	#endregion
}

