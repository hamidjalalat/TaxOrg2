@page "/TaxOrganizationSales/List/{refMenuId:int?}/{refIsReturned:int?}/{refBranchId:int?}/{refInvoiceModelId:int?}/{refNetsaleId:int?}/{refDimProductId:int?}/{refInno:long?}/{refBid?}/{refBpc?}/{refPolicyNo?}/{refStatus:int?}/{refYear:int?}/{refSeason:int?}/{refMonth:int?}"

@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject Infrastructure.Utility UtilityClass;
@inject Infrastructure.NotificationSettings NotificationSettingsClass;

@inject Services.TaxOrganizationSalesService TaxOrganizationSalesService;
@inject Services.BranchsService BranchsService ;
@inject Services.InvoiceModelsService InvoiceModelsService ;
@inject Services.NetsalesService NetsalesService ;
@inject Services.DimProductsService DimProductsService ;

@using System.Globalization;

@if (IsFormLoading)
{
    <NazmLoading IsShow="true" />
}
else
{
    @if (IsFormProgressing)
    {
        <NazmLoadingProgress IsShow="true" />
    }

    @if (refMenuId != null)
    {
        <div id="dgv-main-div" class="row">

            <div class="col">

                <div class="accordion" id="accordionPanelsStayOpenExample">

                    <div class="accordion-item">
                        <h2 class="accordion-header justify-content-around">
                            <button class="accordion-button @((dgvMain != null) ? "collapsed": "")" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="@((dgvMain != null) ? "": "true")" aria-controls="panelsStayOpen-collapseOne">
                                @(Resources.DataDictionary.Filters)
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse @((dgvMain != null) ? "": "show")">
                            <div class="accordion-body">
                                <div class="row">
                                    <div class="col-sm-2 mb-3">
                                        <label for="SelectedYear" class="form-label">@(Resources.DataDictionary.DateShYear) :</label>
                                        <div class="@(IsYearInvalid ? "invalid" : "")">
                                            <NazmDropDown UniqueId="year" CSS="form-control"
                                                            IsAllowClear="true" IsAllowFiltering="true" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                            ValueProperty="Id" TextProperty="Title"
                                                            DataItems="@(cmbYears)" BindValue="SelectedYear"
                                                            TItem="Infrastructure.ComboClass" TResult="int"
                                                            ValueChangedEventHandler="OnYearChanged" />
                                        </div>
                                        @if (IsYearInvalid)
                                        {
                                            <span class="text-danger">@(YearInvalidMessage)</span>
                                        }
                                    </div>
                                </div>
                                <EditForm Model="InputModel" OnValidSubmit="OnFiltersSubmitAsync">
                                    <FluentValidationValidator />
                                    <DataAnnotationsValidator />
                                    <div>
                                        <div class="row">
                                            <div class="col-sm-2 mb-3">
                                                <label for="season" class="form-label">@(Resources.DataDictionary.Season) :</label>
                                                <NazmDropDown UniqueId="Season" CSS="form-control"
                                                              IsAllowClear="true" IsAllowFiltering="true" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                              ValueProperty="Id" TextProperty="Title"
                                                              DataItems="@(cmbSeasons)" BindValue="SelectedSeason"
                                                              TItem="Infrastructure.ComboClass" TResult="int"
                                                              ValueChangedEventHandler="OnSeasonChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => SelectedSeason" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="Month" class="form-label">@(Resources.DataDictionary.Month) :</label>
                                                <NazmDropDown UniqueId="Month" CSS="form-control"
                                                              IsAllowClear="true" IsAllowFiltering="true" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                              ValueProperty="Id" TextProperty="Title"
                                                              DataItems="@(cmbMonths)" BindValue="SelectedMonth"
                                                              TItem="Infrastructure.ComboClass" TResult="int"
                                                              ValueChangedEventHandler="OnMonthChanged" />
                                                <div class="form-control-validation">
                                                <ValidationMessage For="() => SelectedMonth" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="Branch" class="form-label">@(Resources.DataDictionary.Branch) :</label>
                                                <RadzenDropDownDataGrid id="Branch" class="form-control" AllowClear="true"
                                                                        AllowFiltering="true" FilterOperator="StringFilterOperator.Contains"
                                                                        ValueProperty="Code" TextProperty="FullName" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                                        Data="@(cmbBranches)" @bind-Value="@(InputModel.BranchId)" Change="(args) => OnBranchChanged(args)"
                                                                        PagerAlwaysVisible="true" ShowPagingSummary="true" PagingSummaryFormat="@(Resources.Messages.Common.PagingSummaryFormat)"
                                                                        SearchTextPlaceholder="@(Resources.DataDictionary.Filter)">
                                                    <Columns>
                                                        <RadzenDropDownDataGridColumn Property="FullName" Title="@(Resources.DataDictionary.Title)" Filterable="true" Sortable="false" />
                                                    </Columns>
                                                </RadzenDropDownDataGrid>
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.BranchId" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="InvoiceModel" class="form-label">@(Resources.DataDictionary.InvoiceModel) :</label>
                                                <NazmDropDown UniqueId="InvoiceModel" CSS="form-control"
                                                              IsAllowClear="true" IsAllowFiltering="true" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                              ValueProperty="Id" TextProperty="Name"
                                                              DataItems="@(cmbInvoiceModels)" BindValue="InputModel.InvoiceModelId"
                                                              TItem="ViewModels.InvoiceModels.InvoiceModelActiveViewModel" TResult="int"
                                                              ValueChangedEventHandler="OnInvoiceModelChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.InvoiceModelId" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="Netsale" class="form-label">@(Resources.DataDictionary.Netsale) :</label>
                                                <RadzenDropDownDataGrid id="Netsale" class="form-control" AllowClear="true"
                                                                        AllowFiltering="true" FilterOperator="StringFilterOperator.Contains"
                                                                        ValueProperty="Code" TextProperty="FullName" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                                        Data="@(cmbNetsales)" @bind-Value="@(InputModel.NetsaleId)" Change="(args) => OnNetsaleChanged(args)"
                                                                        PagerAlwaysVisible="true" ShowPagingSummary="true" PagingSummaryFormat="@(Resources.Messages.Common.PagingSummaryFormat)"
                                                                        SearchTextPlaceholder="@(Resources.DataDictionary.Filter)">
                                                    <Columns>
                                                        <RadzenDropDownDataGridColumn Property="FullName" Title="@(Resources.DataDictionary.Title)" Filterable="true" Sortable="false" />
                                                    </Columns>
                                                </RadzenDropDownDataGrid>
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.NetsaleId" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-2 mb-3">
                                                <label for="DimProduct" class="form-label">@(Resources.DataDictionary.DimProduct) :</label>
                                                <NazmDropDown UniqueId="DimProduct" CSS="form-control"
                                                              IsAllowClear="true" IsAllowFiltering="true" Placeholder="@(Resources.Messages.Validations.PleaseSelectOne)"
                                                              ValueProperty="Id" TextProperty="Name"
                                                              DataItems="@(cmbDimProducts)" BindValue="InputModel.DimProductId"
                                                              TItem="ViewModels.DimProducts.DimProductActiveViewModel" TResult="int"
                                                              ValueChangedEventHandler="OnDimProductChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.DimProductId" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="PolicyNo" class="form-label">@(Resources.DataDictionary.POLICY_NO) :</label>
                                                <NazmInputText UniqueId="PolicyNo"
                                                               CSS="form-control"
                                                               ValueProperty="@(InputModel.PolicyNo)"
                                                               ValueChangedEventHandler="OnPolicyNoChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.PolicyNo" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2  mb-3">
                                                <label for="Inno" class="form-label">@(Resources.DataDictionary.INNO) :</label>
                                                <InputNumber id="Inno" class="form-control no-spinner" @bind-Value="InputModel.Inno" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.Inno" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="Bid" class="form-label">@(Resources.DataDictionary.BID) :</label>
                                                <NazmInputText UniqueId="Bid"
                                                               CSS="form-control"
                                                               ValueProperty="@(InputModel.Bid)"
                                                               ValueChangedEventHandler="OnBidChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.Bid" />
                                                </div>
                                            </div>

                                            <div class="col-sm-2 mb-3">
                                                <label for="Tinb" class="form-label">@(Resources.DataDictionary.TINB) :</label>
                                                <NazmInputText UniqueId="Tinb"
                                                               CSS="form-control"
                                                               ValueProperty="@(InputModel.Tinb)"
                                                               ValueChangedEventHandler="OnTinbChanged" />
                                                <div class="form-control-validation">
                                                    <ValidationMessage For="() => InputModel.Tinb" />
                                                </div>
                                            </div>

                                        </div>

                                        <div class="row">
                                            <div class="col-md-12 mb-3 mt-3">
                                                <label class="form-label">@(Resources.DataDictionary.Status) :</label>
                                                <InputRadioGroup @bind-Value="InputModel.Status">
                                                    <div class="form-check-inline">
                                                        <InputRadio id="all" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.ALL)" />
                                                        <label for="all" class="form-check-label"><span class="btn btn-sm bg-secondary text-white">@(Resources.DataDictionary.All)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="Success" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.SUCCESS)" />
                                                        <label for="Success" class="form-check-label"><span class="btn btn-sm bg-success text-white">@(Resources.DataDictionary.Success)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="Failed" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.FAILED)" />
                                                        <label for="Failed" class="form-check-label"><span class="btn btn-sm bg-danger text-white">@(Resources.DataDictionary.Failed)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="Sending" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.SENDING)" />
                                                        <label for="Sending" class="form-check-label"><span class="btn btn-sm bg-primary text-white">@(Resources.DataDictionary.Sending)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="Pending" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.PENDING)" />
                                                        <label for="Pending" class="form-check-label"><span class="btn btn-sm bg-warning text-white">@(Resources.DataDictionary.Pending)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="Cancel" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.CANCEL)" />
                                                                <label for="Cancel" class="form-check-label"><span class="btn btn-sm" style="background-color: lightcoral; color: white">@(Resources.DataDictionary.Cancel)</span></label>
                                                    </div>
                                                    <div class="form-check-inline">
                                                        <InputRadio id="EDITFORSEND" class="form-check-input" style="margin-top: 6px;" Value="@(Domain.Enums.StatusEnum.EDITFORSEND)" />
                                                        <label for="EDITFORSEND" class="form-check-label"><span class="btn btn-sm bg-info text-white">@(Resources.DataDictionary.EDITFORSEND)</span></label>
                                                    </div>
                                                </InputRadioGroup>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="mb-3  d-flex justify-content-end">
                                                <button type="submit" class="btn btn-primary btn-sm" title="@(Resources.Buttons.Show)">
                                                    <i class="@(Resources.ButtonsIcon.Show) @(Resources.DefaultValues.IconSize24)"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </EditForm>

                            </div>
                        </div>
                    </div>

                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button @((dgvMain != null) ? "": "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="@((dgvMain != null) ? "true": "")" aria-controls="panelsStayOpen-collapseTwo">
                                @(Resources.DataDictionary.List)
                            </button>
                        </h2>
                        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse  @((dgvMain != null) ? "show": "")">
                            <div class="accordion-body">

                                <RadzenDataGrid TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" @ref="refToDataGrid" Data="@((dgvMain != null) ? dgvMain.Items: null)"
                                                AllowColumnResize="true" AllowPaging="false" ShowPagingSummary="false" PagerPosition="PagerPosition.Bottom"
                                                AllowSorting="true" Sort="OnSortGrid"
                                                AllowFiltering="true" Filter="OnFilterAddGrid" FilterCleared="OnFilterClearedGrid" FilterDelay="@(Infrastructure.Utility.DataGridFilterDelay)"
                                                FilterMode="FilterMode.Simple" LogicalFilterOperator="LogicalFilterOperator.And" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                                ApplyFilterText="@(Resources.Buttons.Apply)" ClearFilterText="@(Resources.Buttons.Clear)">
                                    <EmptyTemplate>
                                        <NazmDataGridEmptyTemplate />
                                    </EmptyTemplate>

                                    <HeaderTemplate>
                                        <NazmDataGridHeaderTemplate IsGridExportExcelButton="true" GridExportExcelEventHandler="GridExportExcelAsync" IsCreateButton="true" CreateEventHandler="Create" />
                                    </HeaderTemplate>

                                    <Columns>
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Title="@(Resources.DataDictionary.Action)" Filterable="false" Sortable="false" CssClass="actionDropdownButton" Width="130px">
                                            <Template Context="itemData">
                                                    <div class="">
                                                        @if (!(!itemData.ShowEdit && !itemData.ShowCancelAndEditForSend && !itemData.ShowDelete))
                                                        {
                                                            @if (itemData.ShowEdit)
                                                            {
                                                                if(itemData.STATUS == "FAILED"){
                                                                    <button type="button" class="btn btn-warning btn-sm ml-1" title="@(Resources.Buttons.Edit)" @onclick="() => passingNewModel(itemData)" data-bs-toggle="modal" data-bs-target="#modalConfirmation">
                                                                        <i class="@(Resources.ButtonsIcon.Edit) @(Resources.DefaultValues.IconSize18)"></i>
                                                                    </button>
                                                                }
                                                                else
                                                                {
                                                                    <button type="button" class="btn btn-warning btn-sm ml-1" title="@(Resources.Buttons.Edit)" @onclick="() => Edit(itemData)">
                                                                        <i class="@(Resources.ButtonsIcon.Edit) @(Resources.DefaultValues.IconSize18)"></i>
                                                                    </button>
                                                                }
                                                            }
                                                            @if (itemData.ShowCancelAndEditForSend)
                                                            {
                                                                <button type="button" class="btn btn-info btn-sm ml-1"  title="@(Resources.Buttons.EditTsp)" @onclick="() => passingNewModel(itemData, true)" data-bs-toggle="modal" data-bs-target="#modalEdit">
                                                                    <i class="@(Resources.ButtonsIcon.EditTsp) @(Resources.DefaultValues.IconSize18)"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm ml-1" style="background-color:  darkred;); color: white;" title="@(Resources.Buttons.CancelTsp)" @onclick="() => passingNewModel(itemData)" data-bs-toggle="modal" data-bs-target="#modalCancle">
                                                                    <i class="@(Resources.ButtonsIcon.CancelTsp) @(Resources.DefaultValues.IconSize18)"></i>
                                                                </button>
                                                            }
                                                            @if (itemData.ShowDelete)
                                                            {
                                                                <button type="button" class="btn btn-danger btn-sm ml-1" title="@(Resources.Buttons.Delete)" @onclick="() => passingNewModel(itemData)" data-bs-toggle="modal" data-bs-target="#modalDelete">
                                                                    <i class="@(Resources.ButtonsIcon.Delete) @(Resources.DefaultValues.IconSize18)"></i>
                                                                </button>
                                                            }

                                                        }
                                                        <button type="button" class="btn btn-secondary btn-sm ml-1" title="@(Resources.Buttons.Copy)" @onclick="() => Copy(itemData)">
                                                            <i class="@(Resources.ButtonsIcon.Copy) @(Resources.DefaultValues.IconSize18)"></i>
                                                        </button>
                                                    </div>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Title="" Filterable="false" Sortable="false" CssClass="actionDropdownButton" Width="50px">
                                            <Template Context="itemData">
                                                <div class="w-100 d-flex justify-content-center">
                                                    <span class="mdi mdi-circle @(itemData.StatusColor != "dark" ? $"text-{itemData.StatusColor}" : string.Empty )" style="font-size: 25px; color : @(itemData.StatusColor == "dark" ? "lightcoral" : itemData.StatusColor )"></span>

                                                </div>

                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="INNO" Title="@(Resources.DataDictionary.INNO)" Width="100px"/>
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="IndatimDateSH" Title="@(Resources.DataDictionary.IndatimDateSH)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="FEE" Title="@(Resources.DataDictionary.FEE)" Width="100px">
                                            <Template Context="itemData">
                                                @(UtilityClass.setSeparatedDigits(itemData.FEE.ToString()))
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="DIS" Title="@(Resources.DataDictionary.DIS)" Width="100px">
                                            <Template Context="itemData">
                                                @(UtilityClass.setSeparatedDigits(itemData.DIS.ToString()))
                                            </Template>
                                        </RadzenDataGridColumn>
                                       @*  <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="TDIS" Title="@(Resources.DataDictionary.TDIS)" Width="100px">
                                            <Template Context="itemData">
                                                @(UtilityClass.setSeparatedDigits(itemData.TDIS.ToString()))
                                            </Template>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="VRA" Title="@(Resources.DataDictionary.VRA)" Width="100px" />
                                        @* <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="TINS" Title="@(Resources.DataDictionary.TINS)" Width="100px" /> *@
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="BID" Title="@(Resources.DataDictionary.BID)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="TOB" Title="@(Resources.DataDictionary.TOB)" Width="64px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="TINB" Title="@(Resources.DataDictionary.TINB)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="BPC" Title="@(Resources.DataDictionary.BPC)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="SSTID" Title="@(Resources.DataDictionary.SSTID)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="SSTT" Title="@(Resources.DataDictionary.SSTT)" Width="170px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="TAXID" Title="@(Resources.DataDictionary.TAXID)" Width="180px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="REFERENCE_ID" Title="@(Resources.DataDictionary.REFERENCE_ID)" Width="270px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="POLICY_NO" Title="@(Resources.DataDictionary.POLICY_NO)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="StatusSH" Title="@(Resources.DataDictionary.StatusSH)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="BRANCH_ID" Title="@(Resources.DataDictionary.BRANCH_ID)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="INVOICE_MODEL" Title="@(Resources.DataDictionary.INVOICE_MODEL)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="AGENT_ID" Title="@(Resources.DataDictionary.AGENT_ID)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="FIELDCODE" Title="@(Resources.DataDictionary.FIELDCODE)" Width="100px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="SETM" Title="@(Resources.DataDictionary.SETM)" Width="64px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="INTY" Title="@(Resources.DataDictionary.INTY)" Width="84px" />
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="INS" Title="@(Resources.DataDictionary.INS)" Width="100px" />
                                        @* <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="IsCancel" Title="@(Resources.DataDictionary.IsCancel)" Width="80px" >
                                            <Template Context="itemData">
                                                @(UtilityClass.getYesNoTitle(itemData.IsCancel.ToString()))
                                            </Template>
                                        </RadzenDataGridColumn> *@
                                        <RadzenDataGridColumn TItem="ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel" Property="ERROR_DSC" Title="@(Resources.DataDictionary.ERROR_DSC)" Width="350px" />
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        @if (dgvMain != null && IsFormProgressing == false)
        {
            <NazmPagination TotalCount="@(dgvMain.TotalCount)" TotalPages="@(dgvMain.TotalPages)" PageNumber="@(dgvMain.PageNumber)" PageSize="@(dgvMain.PageSize)" EventPageNumberChanged="OnPageNumberChangedGrid" EventPageSizeChanged="OnPageSizeChangedGrid" />
        }
    }
    else
    {
        <NazmEmptyRecord />
    }

}

<NazmNotification NotificationSettings="@(lstNotifications)" />

<NazmModal UniqueId="modalConfirmation"
           RequiredClose="true"
           IconType="Infrastructure.Enums.ModalClass.ModalIconType.Warning"
           StateType="Infrastructure.Enums.ModalClass.ModalStateType.Confirm"
           Title="@(Resources.DataDictionary.Warning)"
           EventCallbackHandler="() => Edit()">
    <Body>
        @(Resources.Messages.Common.EditFailedMessage)
    </Body>
</NazmModal>

<NazmModal  UniqueId="modalDelete"
            RequiredClose="true"
            IconType="Infrastructure.Enums.ModalClass.ModalIconType.Warning"
            StateType="Infrastructure.Enums.ModalClass.ModalStateType.Confirm"
            Title="@(Resources.DataDictionary.Warning)"
           EventCallbackHandler="modalDeleteConfirmHandlerAsync">
    <Body>
        @(string.Format(Resources.Messages.Validations.MessageDelete, Resources.DataDictionary.TaxOrganizationSale))
    </Body>
</NazmModal>

<NazmModal  UniqueId="modalCancle"
            RequiredClose="true"
            IconType="Infrastructure.Enums.ModalClass.ModalIconType.Warning"
            StateType="Infrastructure.Enums.ModalClass.ModalStateType.Confirm"
            Title="@(Resources.DataDictionary.Warning)"
            EventCallbackHandler="modalCancelConfirmHandlerAsync">
    <Body>
        <h5 class="modal-title fs-5 text-danger" id="modalEditLabel">
            @(Resources.DataDictionary.Attention) : 
        </h5>
        <span>
            @(Resources.Messages.Common.CancleTspMessage)
        </span>
        <br/>
        <br/>
        <span>
            @(string.Format(Resources.Messages.Validations.MessageCancel, Resources.DataDictionary.TaxOrganizationSale))

        </span>
    </Body>
</NazmModal>

<div class="modal fade" id="modalEdit" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalEditLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title fs-5" id="modalEditLabel">
                    @(Resources.DataDictionary.EditTsp)
                </h2>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="EditForSendModel" OnValidSubmit="EditModalSubmitet">
                <FluentValidationValidator />
                <DataAnnotationsValidator />
                <div class="modal-body">
@*                     <div class="mb-3">
                        <p class="text-danger">@(Resources.Messages.Common.CancelBeforeFix)</p>
                    </div> *@
                    <div class="mb-3">
                        <label for="fee" class="form-label">@(Resources.DataDictionary.FEE) :</label>
                        <div class="@(IsFeeInvalid ? " invalid" : "") ltr-style">
                            <NazmInputText UniqueId="fee"
                                           CSS="form-control"
                                           ValueProperty="@(strFEE)"
                                           ValueChangedEventHandler="OnStrFeeValueChanged" />
                        </div>
                        @if (IsFeeInvalid)
                        {
                            <span class="text-danger">@(FeeInvalidMessage)</span>
                        }

                    </div>
                    <div class="mb-3">
                        <label for="fromDate" class="form-label">@(Resources.DataDictionary.Date) :</label>
                        <div class="">
                            <NazmDatePickerPersian DateInput="EditForSendModel.INDATIM" EventDateChanged="OnIndatimDateSetAsync" />

                        </div>
                        @if (IsEditForSendDateInvalid)
                        {
                            <span class="text-danger">@(EditForSendDateInvalidMessage)</span>
                        }
@*                         <div class="form-control-validation">
                            <ValidationMessage For="() => EditForSendModel.INDATIM" />
                        </div> *@
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger btn-sm" title="@(Resources.Buttons.Cancel)" data-bs-dismiss="modal">
                        <i class="@(Resources.ButtonsIcon.Cancel) @(Resources.DefaultValues.IconSize24)"></i>
                    </button>
                    <button type="submit" class="btn btn-success btn-sm" title="@(Resources.Buttons.Save)">
                        <i class="@(Resources.ButtonsIcon.Save) @(Resources.DefaultValues.IconSize24)"></i>
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    // ********************
    #region Properties

    [Parameter]
    public int? refMenuId { get; set; }

    [Parameter]
    public int? refIsReturned { get; set; }
    [Parameter]
    public int? refBranchId { get; set; }
    [Parameter]
    public int? refInvoiceModelId { get; set; }
    [Parameter]
    public int? refNetsaleId { get; set; }
    [Parameter]
    public int? refDimProductId { get; set; }
    [Parameter]
    public long? refInno { get; set; }
    [Parameter]
    public string refBid { get; set; }
    [Parameter]
    public string refBpc { get; set; }
    [Parameter]
    public string refPolicyNo { get; set; }
    [Parameter]
    public int? refStatus { get; set; }
    [Parameter]
    public int? refYear { get; set; }
    [Parameter]
    public int? refSeason { get; set; }
    [Parameter]
    public int? refMonth { get; set; }

    public bool IsFormLoading { get; set; }
    public bool IsFormProgressing { get; set; }

    private List<ViewModels.SortItem> lstSortItems { get; set; }
    private List<ViewModels.FilterItem> lstFilterItems { get; set; }
    RadzenDataGrid<ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel> refToDataGrid;
    public ViewModels.PagingViewModel<ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel> dgvMain { get; set; }

    public PersianCalendar PersianCalendar { get; set; }

    private ViewModels.TaxOrganizationSales.TaxOrganizationSaleInputParamsViewModel InputModel { get; set; }

    private ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel EditForSendModel { get; set; }

    private ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel Model { get; set; }

    public int? SelectedYear { get; set; }
    public int? SelectedSeason { get; set; }
    public int? SelectedMonth { get; set; }

    private DateTime FromDateMonth { get; set; }
    private DateTime ToDateMonth { get; set; }
    private DateTime FromDateSeason { get; set; }
    private DateTime ToDateSeason { get; set; }
    private DateTime FromDateYear { get; set; }
    private DateTime ToDateYear { get; set; }

    private List<Infrastructure.ComboClass> cmbYears { get; set; }
    private IEnumerable<Infrastructure.ComboClass> cmbSeasons { get; set; }
    private IEnumerable<Infrastructure.ComboClass> cmbMonths { get; set; }

    public IEnumerable<ViewModels.Branchs.BranchActiveViewModel> cmbBranches { get; set; }
    public IEnumerable<ViewModels.InvoiceModels.InvoiceModelActiveViewModel> cmbInvoiceModels { get; set; }
    public IEnumerable<ViewModels.Netsales.NetsaleActiveViewModel> cmbNetsales { get; set; }
    public IEnumerable<ViewModels.DimProducts.DimProductActiveViewModel> cmbDimProducts { get; set; }

    private int CurrentPersianYear {get; set; }
    private bool IsYearInvalid { get; set; }
    private string YearInvalidMessage { get; set; }

    private bool IsEditForSendDateInvalid { get; set; }
    private string EditForSendDateInvalidMessage { get; set; }

    private string strFEE { get; set; }
    private bool IsFeeInvalid { get; set; }
    private string FeeInvalidMessage { get; set; }

    private List<Infrastructure.NotificationSettings> lstNotifications { get; set; }

    private bool FailedStatusConfirmation { get; set; }


    #endregion

    // ********************
    #region Events

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsFormLoading = true;
        // ********************

        lstFilterItems = new List<ViewModels.FilterItem>();
        lstSortItems = new List<ViewModels.SortItem>();
        lstNotifications = new List<Infrastructure.NotificationSettings>();
        dgvMain = null;

        PersianCalendar = new PersianCalendar();

        CurrentPersianYear = Nazm.DateConversionClass.GetInstance().GetPersianDateYearNumber(Nazm.DateTime.Now);

        EditForSendModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel();

        InputModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleInputParamsViewModel();

        Model = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel();

        InputModel.Status = Domain.Enums.StatusEnum.ALL;


        cmbYears = new List<Infrastructure.ComboClass>();

        var lstComboSeasons = await UtilityClass.getSeasonsAsync();
        if (lstComboSeasons != null)
        {
            cmbSeasons = lstComboSeasons;
        }

        var lstComboMonths = await UtilityClass.getPersianMonthsAsync();
        if (lstComboMonths != null)
        {
            cmbMonths = lstComboMonths;
        }

        bindYears();
        await bindBranches();
        await bindInvoiceModels();
        await bindNetsales();
        await bindDimProducts();

        if(refIsReturned == 1)
        {
            if(refYear != null && refYear != 0)
            {
                await OnYearChanged(refYear);
            }
            else
            {
                await OnYearChanged(CurrentPersianYear);
            }

            if(refBranchId != null && refBranchId != 0)
            {
                InputModel.BranchId = refBranchId.Value;
            }
            else
            {
                InputModel.BranchId = null;
            }

            if(refInvoiceModelId != null && refInvoiceModelId != 0)
            {
                InputModel.InvoiceModelId = refInvoiceModelId.Value;
            }
            else
            {
                InputModel.InvoiceModelId = null;
            }

            if(refNetsaleId != null && refNetsaleId != 0)
            {
                InputModel.NetsaleId = refNetsaleId.Value;
            }
            else
            {
                InputModel.NetsaleId = null;
            }

            if(refDimProductId != null && refDimProductId != 0)
            {
                InputModel.DimProductId = refDimProductId.Value;
            }
            else
            {
                InputModel.DimProductId = null;
            }

            if(refInno != null && refInno != 0)
                InputModel.Inno = refInno;

            if(refBid != null)
                InputModel.Bid = refBid;

            if(refBpc != null)
                InputModel.Tinb = refBpc;

            if(refPolicyNo != null)
                InputModel.PolicyNo = refPolicyNo;

            if(refStatus != null)
                InputModel.Status = (Domain.Enums.StatusEnum)refStatus;

            if (refSeason != null && refSeason != 0)
            {
                await OnSeasonChanged(refSeason);
            }
            else
            {
                SelectedSeason = null;
            }

            if (refMonth != null && refMonth != 0)
            {
                await OnMonthChanged(refMonth);
            }
            else
            {
                SelectedMonth = null;
            }

            await OnFiltersSubmitAsync();

        }
        else
        {

            await OnYearChanged(CurrentPersianYear);
            await InitMonthAndSeason();
        }



        IsYearInvalid = false;

        IsEditForSendDateInvalid = false;

        // ********************
        IsFormLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (lstFilterItems.Count > 0)
        {
            foreach (var filterItem in lstFilterItems)
            {
                var column = refToDataGrid.ColumnsCollection.Where(c => c.Property == filterItem.Field).FirstOrDefault();

                if (column != null)
                {
                    column.FilterValue = filterItem.Value;
                    //column.FilterOperator = filterItem.Operator as Radzen.FilterOperator;
                }
            }
            await refToDataGrid.Reload();
        }

        if (lstSortItems.Count > 0)
        {
            foreach (var sortItem in lstSortItems)
            {
                var column = refToDataGrid.ColumnsCollection.Where(c => c.Property == sortItem.Field).FirstOrDefault();

                if (column != null)
                {
                    column.SortOrder = (sortItem.SortOrder == Infrastructure.Utility.SortAscending) ? SortOrder.Ascending : SortOrder.Descending;
                }
            }
            await refToDataGrid.Reload();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void bindYears()
    {
        var year = 1402;
        cmbYears.Add(new Infrastructure.ComboClass()
        {
            Id = year,
            Title = year.ToString(),
        });

        while (year != CurrentPersianYear)
        {
            year++;
            cmbYears.Add(new Infrastructure.ComboClass()
            {
                Id = year,
                Title = year.ToString(),
            });
        }
    }

    private async Task InitMonthAndSeason()
    {

        var tempMonth = Nazm.DateConversionClass.GetInstance().GetPersianDateMonthNumber(Nazm.DateTime.Now);

        int tempSeason = 0;

        switch (tempMonth)
        {
            case 1:
            case 2:
            case 3:
                tempSeason = 1;
                break;
            case 4:
            case 5:
            case 6:
                tempSeason = 2;
                break;
            case 7:
            case 8:
            case 9:
                tempSeason = 3;
                break;
            case 10:
            case 11:
            case 12:
                tempSeason = 4;
                break;
            default:
                break;
        }

        await OnSeasonChanged(tempSeason);
        await OnMonthChanged(tempMonth);
    }

    private async Task OnYearChanged(dynamic value)
    {
        IsFormProgressing = true;
        // ********************

        IsYearInvalid = YearValidation(value);

        SelectedYear = value;

        if (!IsYearInvalid)
        {
            FromDateYear = PersianCalendar.ToDateTime(SelectedYear.Value, 1, 1, 0, 0, 0, 0);
            ToDateYear = PersianCalendar.ToDateTime((SelectedYear.Value + 1), 1, 1, 0, 0, 0, 0).AddDays(-1);
            InputModel.Year = SelectedYear.Value;
        }

        SelectedMonth = null;
        SelectedSeason = null;

        // ********************
        IsFormProgressing = false;
    }

    private bool YearValidation(int? year)
    {
        var thisYear = CurrentPersianYear;

        if (!(year != 0 && year != null))
        {
            YearInvalidMessage = string.Format(Resources.Messages.Validations.Required, Resources.DataDictionary.Year);
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task Create()
    {
        IsFormProgressing = true;
        // ********************

        string uri = $"{Infrastructure.Utility.setUri<Client.Pages.TaxOrganizationSales.Create>()}/{refMenuId.Value}/{setRefParameters()}";
        //
        NavigationManager.NavigateTo(uri: uri, forceLoad: false);
        // ********************
        IsFormProgressing = false;
    }

    private async Task Copy(ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel viewModel = null)
    {
        IsFormProgressing = true;
        // ********************
        var passedModelID = viewModel != null ? viewModel.ID : Model.ID;

        string uri = $"{Infrastructure.Utility.setUri<Client.Pages.TaxOrganizationSales.Create>()}/{refMenuId.Value}/{setRefParameters()}/{passedModelID}";
        //
        NavigationManager.NavigateTo(uri: uri, forceLoad: false);
        // ********************
        IsFormProgressing = false;
    }

    private async Task Edit(ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel viewModel = null)
    {
        IsFormProgressing = true;
        // ********************
        var passedModelID = viewModel != null ? viewModel.ID : Model.ID;

        string uri = $"{Infrastructure.Utility.setUri<Client.Pages.TaxOrganizationSales.Edit>()}/{refMenuId.Value}/{passedModelID}/{setRefParameters()}";
        NavigationManager.NavigateTo(uri: uri, forceLoad: false);
        // ********************
        IsFormProgressing = false;
    }

    private string setRefParameters()
    {

        InputModel.BranchId = InputModel.BranchId != null ? InputModel.BranchId : 0;
        InputModel.InvoiceModelId = InputModel.InvoiceModelId != null ? InputModel.InvoiceModelId : 0;
        InputModel.NetsaleId = InputModel.NetsaleId != null ? InputModel.NetsaleId : 0;
        InputModel.DimProductId = InputModel.DimProductId != null ? InputModel.DimProductId : 0;
        InputModel.Inno = InputModel.Inno != null ? InputModel.Inno : 0;
        InputModel.Bid = InputModel.Bid != null ? InputModel.Bid : "0";
        InputModel.Tinb = InputModel.Tinb != null ? InputModel.Tinb : "0";
        InputModel.PolicyNo = InputModel.PolicyNo != null ? InputModel.PolicyNo : "0";
        SelectedSeason = SelectedSeason != null ? SelectedSeason : 0;
        SelectedMonth = SelectedMonth != null ? SelectedMonth : 0;


        string uri = $"{1}/{InputModel.BranchId}/{InputModel.InvoiceModelId}/{InputModel.NetsaleId}/{InputModel.DimProductId}/{InputModel.Inno}/{InputModel.Bid}/{InputModel.Tinb}/{InputModel.PolicyNo}/{(int)InputModel.Status}/{SelectedYear}/{SelectedSeason}/{SelectedMonth}";

        return uri;
    }

    private async Task DeleteAsync(ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel viewModel)
    {
        IsFormProgressing = true;
        // ********************
        var varResult = await TaxOrganizationSalesService.DeleteAsync(int.Parse(viewModel.ID));
        if (varResult != null)
        {

            lstNotifications.Clear();
            if (varResult.IsSuccess)
            {
                if (varResult.Successes.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Successes, Infrastructure.Enums.MessageType.Success));
            }
            if (varResult.IsFailed)
            {
                if (varResult.Errors.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Errors, Infrastructure.Enums.MessageType.Error));
            }
        }

        await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);
        // ********************
        IsFormProgressing = false;
    }

    private async Task CanceleAsync(ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel viewModel)
    {
        IsFormProgressing = true;
        // ********************
        ViewModels.TaxOrganizationSales.TaxOrganizationSaleCancelInputParamsViewModel inputParamsViewModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleCancelInputParamsViewModel()
        {
            Id = int.Parse(viewModel.ID),
        };

        var varResult = await TaxOrganizationSalesService.CancelByIdAsync(inputParamsViewModel);
        if (varResult != null)
        {

            lstNotifications.Clear();
            if (varResult.IsSuccess)
            {
                if (varResult.Successes.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Successes, Infrastructure.Enums.MessageType.Success));
            }
            if (varResult.IsFailed)
            {
                if (varResult.Errors.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Errors, Infrastructure.Enums.MessageType.Error));
            }
        }

        await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);
        // ********************
        IsFormProgressing = false;
    }

    private async Task EditForSendAsync(ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel viewModel)
    {
        IsFormProgressing = true;
        // ********************
        ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel inputParamsViewModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel()
        {
            ID = EditForSendModel.ID,
            FEE = EditForSendModel.FEE,
            INDATIM = EditForSendModel.INDATIM,
        };
        var varResult = await TaxOrganizationSalesService.EditForSendAsync(inputParamsViewModel);
        if (varResult != null)
        {

            lstNotifications.Clear();
            if (varResult.IsSuccess)
            {
                if (varResult.Successes.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Successes, Infrastructure.Enums.MessageType.Success));
            }
            if (varResult.IsFailed)
            {
                if (varResult.Errors.Count() > 0)
                    lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                        (varResult.Errors, Infrastructure.Enums.MessageType.Error));
            }
        }

        await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);
        // ********************
        IsFormProgressing = false;
    }

    private async Task passingNewModel(ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel viewModel, bool IsForSendEdit = false)
    {
        Model = viewModel;

        if(IsForSendEdit)
        {
            IsEditForSendDateInvalid = false;
            EditForSendModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleEditForSendInputParamsViewModel()
            {
                ID = int.Parse(Model.ID),
                INDATIM = Model.INDATIM,
            };

            await OnStrFeeValueChanged(Model.FEE);
        }
    }

    private async Task OnSeasonChanged(dynamic value)
    {
        SelectedSeason = value;

        if(SelectedSeason != null)
        {
            var lstComboMonths = await UtilityClass.getPersianMonthsOfSeasonAsync(SelectedSeason.Value);
            if (lstComboMonths != null)
            {
                SelectedMonth = null;
                cmbMonths = lstComboMonths;
            }

            var toDateMonth = 0;
            var toDateYear = 0;

            if (lstComboMonths[0].Id > 9)
            {
                toDateMonth = (lstComboMonths[0].Id + 3) - 12; 
                toDateYear = SelectedYear.Value + 1;
            }
            else
            {
                toDateMonth = (lstComboMonths[0].Id + 3);
                toDateYear = SelectedYear.Value;
            }

            FromDateSeason = PersianCalendar.ToDateTime(SelectedYear.Value, lstComboMonths[0].Id, 1, 0, 0, 0, 0);
            ToDateSeason = PersianCalendar.ToDateTime(toDateYear, toDateMonth, 1, 0, 0, 0, 0).AddDays(-1);

        }
        else
        {
            var lstComboMonths = await UtilityClass.getPersianMonthsAsync();
            if (lstComboMonths != null)
            {
                SelectedMonth = null;
                cmbMonths = lstComboMonths;
            }
        }
    }

    private async Task OnMonthChanged(dynamic value)
    {
        SelectedMonth = value;
        if(SelectedMonth != null)
        {

            var toDateMonth = 0;
            var toDateYear = 0;

            if (SelectedMonth.Value > 11)
            {
                toDateMonth = (SelectedMonth.Value + 1) - 12;
                toDateYear = SelectedYear.Value + 1;
            }
            else
            {
                toDateMonth = (SelectedMonth.Value + 1);
                toDateYear = SelectedYear.Value;
            }

            FromDateMonth = PersianCalendar.ToDateTime(SelectedYear.Value, SelectedMonth.Value, 1, 0, 0, 0, 0);
            ToDateMonth = PersianCalendar.ToDateTime(toDateYear, toDateMonth, 1, 0, 0, 0, 0).AddDays(-1);
        }
    }

    private async Task bindBranches()
    {

        IsFormProgressing = true;
        // ********************
        ViewModels.Shared.PublicViewModel branchInputParamsViewModel = new ViewModels.Shared.PublicViewModel()
            {
                PageSize = Infrastructure.Utility.PageSizeMax,
            };
        var varBranchesResult = await BranchsService.FetchActiveAsync(branchInputParamsViewModel);
        if (varBranchesResult != null)
        {
            cmbBranches = varBranchesResult.Value.Items;
        }

        // ********************
        IsFormProgressing = false;
    }

    private async Task bindInvoiceModels()
    {

        IsFormProgressing = true;
        // ********************
        ViewModels.Shared.PublicViewModel branchInputParamsViewModel = new ViewModels.Shared.PublicViewModel()
        {
            PageSize = Infrastructure.Utility.PageSizeMax,
        };
        var varInvoiceModelsResult = await InvoiceModelsService.FetchActiveAsync(branchInputParamsViewModel);
        if (varInvoiceModelsResult != null)
        {
            cmbInvoiceModels = varInvoiceModelsResult.Value.Items;
        }

        // ********************
        IsFormProgressing = false;
    }

    private async Task bindNetsales()
    {

        IsFormProgressing = true;
        // ********************
        ViewModels.Shared.PublicViewModel branchInputParamsViewModel = new ViewModels.Shared.PublicViewModel()
            {
                PageSize = Infrastructure.Utility.PageSizeMax,
            };
        var varNetsalesResult = await NetsalesService.FetchActiveAsync(branchInputParamsViewModel);
        if (varNetsalesResult != null)
        {
            cmbNetsales = varNetsalesResult.Value.Items;
        }

        // ********************
        IsFormProgressing = false;
    }

    private async Task bindDimProducts()
    {

        IsFormProgressing = true;
        // ********************
        ViewModels.Shared.PublicViewModel branchInputParamsViewModel = new ViewModels.Shared.PublicViewModel()
            {
                PageSize = Infrastructure.Utility.PageSizeMax,
            };
        var varDimProductsResult = await DimProductsService.FetchActiveAsync(branchInputParamsViewModel);
        if (varDimProductsResult != null)
        {
            cmbDimProducts = varDimProductsResult.Value.Items;
        }

        // ********************
        IsFormProgressing = false;
    }

    private async Task OnBranchChanged(object args)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.BranchId = (args != null) ? int.Parse(args.ToString()) : 0;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnInvoiceModelChanged(dynamic value)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.InvoiceModelId = value != null? value: 0;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnNetsaleChanged(object args)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.NetsaleId = (args != null) ? int.Parse(args.ToString()) : null;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnDimProductChanged(dynamic value)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.DimProductId = value != null ? value : 0;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnPolicyNoChanged(string value)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.PolicyNo = value;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnBidChanged(string value)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.Bid = value;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnTinbChanged(string value)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.Tinb = value;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnModelStatusChange(ChangeEventArgs args)
    {
        IsFormProgressing = true;
        // ********************
        InputModel.Status = (Domain.Enums.StatusEnum)Enum.Parse(typeof(Domain.Enums.StatusEnum), args.Value.ToString());
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnFiltersSubmitAsync()
    {
        IsFormProgressing = true;
        // ********************
        await bindGrid(pageSize: dgvMain != null? dgvMain.PageSize : Infrastructure.Utility.PageSize);
        // ********************
        IsFormProgressing = false;
    }

    private async Task GridExportExcelAsync()
    {
        IsFormProgressing = true;
        // ********************

        await bindGrid(pageSize: Infrastructure.Utility.PageSizeMax, fileExportType: Domain.Enums.FileExportTypeEnum.Office_Excel);

        // ********************
        IsFormProgressing = false;
    }

    private async Task bindGrid(int? pageNumber = Infrastructure.Utility.PageNumber,
                                int? pageSize = Infrastructure.Utility.PageSize,
                                Domain.Enums.FileExportTypeEnum? fileExportType = null
                               )
    {
        if (refMenuId != null && !IsYearInvalid)
        {
            ViewModels.FilterParams filterParams = new ViewModels.FilterParams();
            if (lstFilterItems.Count > 0)
            {
                string strFilterJson = Newtonsoft.Json.JsonConvert.SerializeObject(lstFilterItems);

                filterParams.FilterJson = strFilterJson;
            }
            if (lstSortItems.Count > 0)
            {
                string strSort = null;
                foreach (var sortItem in lstSortItems)
                {
                    strSort += $"{sortItem.Field} {sortItem.SortOrder}, ";
                }

                filterParams.SortBy = strSort.Trim().TrimEnd(',');
            }

            var fromDate = new DateTime();
            var toDate = new DateTime();
            if(SelectedMonth != null)
            {
                fromDate = FromDateMonth;
                toDate = ToDateMonth;
            }
            else if(SelectedSeason != null)
            {
                fromDate = FromDateSeason;
                toDate = ToDateSeason;
            }
            else 
            {
                fromDate = FromDateYear;
                toDate = ToDateYear;
            }

            InputModel.FromDate = fromDate;
            InputModel.ToDate = toDate;

            InputModel.Inno = InputModel.Inno != 0 ? InputModel.Inno : null;
            InputModel.Bid = InputModel.Bid != "0" && InputModel.Bid != string.Empty ? InputModel.Bid : null;
            InputModel.Tinb = InputModel.Tinb != "0" && InputModel.Tinb != string.Empty ? InputModel.Tinb : null;
            InputModel.PolicyNo = InputModel.PolicyNo != "0" && InputModel.PolicyNo != string.Empty ? InputModel.PolicyNo : null;
            InputModel.InvoiceModelId = InputModel.InvoiceModelId != null ? InputModel.InvoiceModelId : 0;
            InputModel.DimProductId = InputModel.DimProductId != null ? InputModel.DimProductId : 0;
            InputModel.BranchId = InputModel.BranchId != null ? InputModel.BranchId : 0;
            //InputModel.NetsaleId = InputModel.NetsaleId != 0 ? InputModel.NetsaleId : null;

            InputModel.Inno = InputModel.Inno != null ? InputModel.Inno : 0;

            if (fileExportType == null)
            {
                ViewModels.TaxOrganizationSales.TaxOrganizationSaleInputParamsViewModel inputParamsViewModel = new ViewModels.TaxOrganizationSales.TaxOrganizationSaleInputParamsViewModel()
                {
                    Year = InputModel.Year,
                    FromDate = InputModel.FromDate,
                    ToDate = InputModel.ToDate,
                    BranchId = InputModel.BranchId,
                    InvoiceModelId = InputModel.InvoiceModelId,
                    NetsaleId = InputModel.NetsaleId,
                    DimProductId = InputModel.DimProductId,
                    PolicyNo = InputModel.PolicyNo,
                    Inno = InputModel.Inno,
                    Bid = InputModel.Bid,
                        Tinb = InputModel.Tinb,
                    Status = InputModel.Status,
                    PageNumber = pageNumber.Value,
                    PageSize = pageSize.Value,
                    FilterParams = filterParams,
                    MenuId = refMenuId.Value,
                };

                var varGrid = await TaxOrganizationSalesService.FetchAllByFilterTaxOrganizationSaleAsync(inputParamsViewModel);
                if (varGrid != null)
                {
                    if (varGrid.IsSuccess)
                    {
                        dgvMain = varGrid.Value;
                    }


                }
            }
            else if (fileExportType == Domain.Enums.FileExportTypeEnum.Office_Excel)
            {
                var varGridColumns = await UtilityClass.getGridColumnListAsync(refToDataGrid.ColumnsCollection);

                ViewModels.TaxOrganizationSales.TaxOrganizationSaleInputParamsViewModel inputParamsViewModel = new()
                {
                    Year = InputModel.Year,
                    FromDate = InputModel.FromDate,
                    ToDate = InputModel.ToDate,
                    BranchId = InputModel.BranchId,
                    InvoiceModelId = InputModel.InvoiceModelId,
                    NetsaleId = InputModel.NetsaleId,
                    DimProductId = InputModel.DimProductId,
                    PolicyNo = InputModel.PolicyNo,
                    Inno = InputModel.Inno,
                    Bid = InputModel.Bid,
                    Tinb = InputModel.Tinb,
                    Status = InputModel.Status,
                    PageSize = pageSize.Value,
                    FilterParams = filterParams,
                    MenuId = refMenuId.Value,
                    FileExportType = Domain.Enums.FileExportTypeEnum.Office_Excel,
                    FileExportColumns = varGridColumns,
                };

                string fileExportName = $"{Resources.DataDictionary.TaxOrganizationSale}.xlsx";
                var varExportExcelData = await TaxOrganizationSalesService.FetchAllByFilterTaxOrganizationSaleAndFileDownloadAsync(inputParamsViewModel);
                if (varExportExcelData != null)
                {
                    if (varExportExcelData.IsSuccess)
                    {
                        await UtilityClass.FileDownloadAsDataStreamFromAPIAsync(JsRuntime, fileExportName, varExportExcelData.Value);

                        if (varExportExcelData.Successes.Count() > 0)
                            lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                                (varExportExcelData.Successes, Infrastructure.Enums.MessageType.Success));
                    }
                    if (varExportExcelData.IsFailed)
                    {
                        if (varExportExcelData.Errors.Count() > 0)
                            lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                                (varExportExcelData.Errors, Infrastructure.Enums.MessageType.Error));
                    }
                }
            }


            InputModel.InvoiceModelId = InputModel.InvoiceModelId != 0 ? InputModel.InvoiceModelId : null;
            InputModel.DimProductId = InputModel.DimProductId != 0 ? InputModel.DimProductId : null;
            InputModel.BranchId = InputModel.BranchId != 0 ? InputModel.BranchId : null;
        }

    }

    private async Task OnSortGrid(DataGridColumnSortEventArgs<ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel> args)
    {
        IsFormProgressing = true;
        // ********************

        ViewModels.SortItem sortColumn = new ViewModels.SortItem()
            {
                Field = args.Column.Property,
                SortOrder = (args.SortOrder == SortOrder.Ascending) ? Infrastructure.Utility.SortAscending : Infrastructure.Utility.SortDescending,
            };

        if (lstSortItems.Exists(c => c.Field == args.Column.Property))
        {
            await sortItemsRemove(args.Column.Property);
        }
        if ((args.SortOrder == SortOrder.Ascending) || (args.SortOrder == SortOrder.Descending))
        {
            if (lstSortItems.Count > 0)
                lstSortItems.Clear();

            lstSortItems.Add(sortColumn);
        }

        await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnFilterAddGrid(DataGridColumnFilterEventArgs<ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel> args)
    {
        IsFormProgressing = true;
        // ********************
        ViewModels.FilterItem filterColumn = new ViewModels.FilterItem()
        {
            Field = args.Column.Property,
            Operator = args.Column.FilterOperator.ToString(),//.Replace("Equals", "eq"),
            Value = args.Column.GetFilterValue(),
        };

        filterColumn.Operator = filterColumn.Operator != "Equals" ? filterColumn.Operator : "Contains";


        // if (lstFilterItems.Exists(c => c.Field == args.Column.Property))
        // {
        //     await filterItemsRemove(args.Column.Property);
        // }

        // lstFilterItems.Add(filterColumn);

        // await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);

        // StateHasChanged();

        if (!lstFilterItems.Exists(c => c.Field == filterColumn.Field && c.Operator == filterColumn.Operator && c.Value == filterColumn.Value))
        {
            if (lstFilterItems.Exists(c => c.Field == args.Column.Property))
            {
                await filterItemsRemove(args.Column.Property);
            }

            lstFilterItems.Add(filterColumn);

            await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);
            StateHasChanged();
        }
        else
        {
            if (lstFilterItems.Exists(c => c.Field == args.Column.Property))
            {
                await filterItemsRemove(args.Column.Property);
            }
        }



        // ********************
        IsFormProgressing = false;
    }

    private async Task OnFilterClearedGrid(DataGridColumnFilterEventArgs<ViewModels.TaxOrganizationSales.TaxOrganizationSaleForGridViewModel> args)
    {
        IsFormProgressing = true;
        // ********************
        if (lstFilterItems.Exists(c => c.Field == args.Column.Property))
        {
            await filterItemsRemove(args.Column.Property);
        }

        await bindGrid(pageSize: dgvMain != null ? dgvMain.PageSize : Infrastructure.Utility.PageSize);

        StateHasChanged();
        // ********************
        IsFormProgressing = false;
    }

    private async Task sortItemsRemove(string strField)
    {
        await Task.Run(() =>
            {
                int index = 0;
                if (lstSortItems.Count > 0)
                {
                    foreach (var sortItem in lstSortItems)
                    {
                        if (sortItem.Field == strField)
                            break;
                        index++;
                    }

                    lstSortItems.RemoveAt(index);
                }

                //refToDataGrid.Sorts.Clear();
            });
    }

    private async Task filterItemsRemove(string strField)
    {
        await Task.Run(() =>
            {
                int index = 0;
                if (lstFilterItems.Count > 0)
                {
                    foreach (var filterItem in lstFilterItems)
                    {
                        if (filterItem.Field == strField)
                            break;
                        index++;
                    }

                    lstFilterItems.RemoveAt(index);

                    refToDataGrid.ClearFilter(refToDataGrid.ColumnsCollection.FirstOrDefault(c => c.Property == strField));
                }
            });
    }

    private async Task OnPageNumberChangedGrid(int pageNum)
    {
        IsFormProgressing = true;
        // ********************

        await bindGrid(pageNumber: pageNum, pageSize: dgvMain?.PageSize);

        // ********************
        IsFormProgressing = false;
    }

    private async Task OnPageSizeChangedGrid(int pageSize)
    {
        IsFormProgressing = true;
        // ********************

        await bindGrid(pageSize: pageSize);

        // ********************
        IsFormProgressing = false;
    }

    private async Task modalDeleteConfirmHandlerAsync()
    {
        IsFormProgressing = true;
        // ********************

        await DeleteAsync(Model);

        // ********************
        IsFormProgressing = false;
    }

    private async Task modalCancelConfirmHandlerAsync()
    {
        IsFormProgressing = true;
        // ********************

        await CanceleAsync(Model);

        // ********************
        IsFormProgressing = false;
    }


    private async Task modalEditConfirmHandlerAsync()
    {
        IsFormProgressing = true;
        // ********************
        FailedStatusConfirmation = true;
        // ********************
        IsFormProgressing = false;
    }

    private async Task OnIndatimDateSetAsync(DateTime? datatime)
    {
        IsFormProgressing = true;
        // ********************

        IsEditForSendDateInvalid = EditForSendDateValidation(datatime);

        EditForSendModel.INDATIM = datatime.Value;

        // ********************
        IsFormProgressing = false;
    }

    private bool EditForSendDateValidation(DateTime? passedDate)
    {
        var thisDate = Nazm.DateTime.Now;

        if (passedDate == null)
        {
            EditForSendDateInvalidMessage = string.Format(Resources.Messages.Validations.Required, Resources.DataDictionary.Date);
            return true;
        }
        else if (!((thisDate.DayOfYear - passedDate.Value.DayOfYear >= 0) && (thisDate.DayOfYear - passedDate.Value.DayOfYear <= int.Parse(Resources.DefaultValues.MoadianNumberOfValidDate))))
        {
            EditForSendDateInvalidMessage = string.Format(Resources.Messages.Validations.EditForSendDateValidation, Resources.DefaultValues.MoadianNumberOfValidDate);
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task EditModalSubmitet()
    {
        IsFormProgressing = true;
        // ********************

        if(!IsEditForSendDateInvalid && !IsFeeInvalid)
        {
            await EditForSendAsync(EditForSendModel);

            await JsRuntime.InvokeVoidAsync("closeModal", "modalEdit");
        }
        else
        {
            List<string> errorMsges = new List<string>
            {
                Resources.Messages.Errors.CancelFailedMessage,
            };
            lstNotifications.AddRange(NotificationSettingsClass.setNotificationsList
                (errorMsges, Infrastructure.Enums.MessageType.Error));

        }

        // ********************
        IsFormProgressing = false;
    }

    private async Task OnStrFeeValueChanged(string value)
    {
        IsFeeInvalid = FeeValidation(value);


        if (!IsFeeInvalid)
        {
            strFEE = UtilityClass.setSeparatedDigits(EditForSendModel.FEE.ToString());
        }
    }

    private bool FeeValidation(string? fee)
    {
        if (!(fee != "" && fee != null))
        {
            FeeInvalidMessage = string.Format(Resources.Messages.Validations.Required, Resources.DataDictionary.FEE);
            return true;
        }

        var lstFee = fee.Where(c => c != ',').ToList();

        var filteredFee = string.Concat(lstFee);

        double numFEE;
        double.TryParse(filteredFee, out numFEE);

        if (!double.TryParse(filteredFee.ToString(), out numFEE))
        {
            FeeInvalidMessage = string.Format(Resources.Messages.Validations.NumberOnly, Resources.DataDictionary.FEE);
            return true;
        }
        if (numFEE < 0)
        {
            FeeInvalidMessage = string.Format(Resources.Messages.Validations.GreaterThanOrEqualTo_FieldValue, Resources.DataDictionary.FEE, "0");
            return true;
        }
        else
        {
            EditForSendModel.FEE = numFEE;
            return false;
        }
    }

    #endregion
}














@*
<label for="Status" class="form-label">@(Resources.DataDictionary.Status) :</label>
<br/>
<div id="Status" class="d-inline">
    <div class=" form-check-inline mb-3">
        <input type="radio" id="All" class="" checked="true" value="@(0)"  @onchange="OnModelStatusChange" name="Status">
        <label for="All" class="form-check-label">@(Resources.DataDictionary.All)</label>
    </div>
    <div class=" form-check-inline mb-3">
        <input type="radio" id="Success" class="" value="@(Domain.Enums.StatusEnum.SUCCESS)"  @onchange="OnModelStatusChange" name="Status">
        <label for="Success" class="form-check-label">@(Resources.DataDictionary.Success)</label>
    </div>
    <div class=" form-check-inline mb-3">
        <input type="radio" id="Failed" class="" value="@(Domain.Enums.StatusEnum.FAILED)"  @onchange="OnModelStatusChange" name="Status">
        <label for="Failed" class="form-check-label">@(Resources.DataDictionary.Failed)</label>
    </div>
    <div class=" form-check-inline mb-3">
        <input type="radio" id="Sending" class="" value="@(Domain.Enums.StatusEnum.SENDING)"  @onchange="OnModelStatusChange" name="Status">
        <label for="Sending" class="form-check-label">@(Resources.DataDictionary.Sending)</label>
    </div>
    <div class=" form-check-inline mb-3">
        <input type="radio" id="Pending" class="" value="@(Domain.Enums.StatusEnum.PENDING)" @onchange="OnModelStatusChange" name="Status">
        <label for="Pending" class="form-check-label">@(Resources.DataDictionary.Pending)</label>
    </div>
    <div class=" form-check-inline mb-3">
        <input type="radio" id="Cancel" class="" value="@(Domain.Enums.StatusEnum.CANCEL)" @onchange="OnModelStatusChange" name="Status">
        <label for="Cancel" class="form-check-label">@(Resources.DataDictionary.Cancel)</label>
    </div>
</div> *@