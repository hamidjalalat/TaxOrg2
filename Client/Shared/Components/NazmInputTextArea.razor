
<InputTextArea id="@(UniqueId)" class="@(CSS)" style="@(Style)" placeholder="@(Placeholder)" rows="@(Rows)" cols="@(Cols)"
               Value="@(ValueProperty)" ValueChanged="@((eventArgs) => OnValueChanged(eventArgs))" ValueExpression="() => ValueProperty"
               maxlength="@(MaxLength)" readonly="@(IsReadOnly)" @attributes="AdditionalAttributes" />





@code {
    // ********************
    #region Properties

    [Parameter, EditorRequired]
    public string UniqueId { get; set; }

    [Parameter]
    public string CSS { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string ValueProperty { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public int MaxLength { get; set; }

    [Parameter]
    public int Rows { get; set; }

    [Parameter]
    public int Cols { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChangedEventHandler { get; set; }

    #endregion

    // ********************
    #region Events

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Placeholder = (Placeholder == null) ? string.Empty : Placeholder;

        MaxLength = (MaxLength == 0) ? 500 : MaxLength;

        Rows = (Rows == 0) ? 4 : Rows;

        Cols = (Cols == 0) ? 50 : Cols;

    }

    private async Task OnValueChanged(string value)
    {
        await ValueChangedEventHandler.InvokeAsync(value);
    }

    #endregion
}
